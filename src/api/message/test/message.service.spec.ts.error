// import { MessageService } from '../message.service';
// import { Test } from '@nestjs/testing';
// import { CommandBus, QueryBus } from '@nestjs/cqrs';
// import { User } from '../../user/domain/entities/user.entity';
// import { UserType } from '../../user/domain/enum/user-type.enum';
// import Message from '../domain/entities/message.entity';
// import { AuthService } from '../../auth/auth.service';
// import { JwtService } from '@nestjs/jwt';
// import { mockedJwtService } from '../../../util/mocks/jwt.service.mock';
//
// describe('MessageService', () => {
//   let service: MessageService;
//   let commandBus: jest.Mock;
//   let queryBus: jest.Mock;
//
//   const mockUser1: User = new User();
//   mockUser1.id = '1';
//   mockUser1.email = 'user@email.com';
//   mockUser1.username = 'billy';
//   mockUser1.password = 'hash';
//   mockUser1.userType = UserType.USER;
//
//   const message: Message = new Message();
//   message.author = mockUser1;
//   message.content = 'test';
//
//   beforeEach(async () => {
//     commandBus = jest.fn().mockResolvedValue('');
//     queryBus = jest.fn().mockResolvedValue('');
//     const modRef = await Test.createTestingModule({
//       providers: [
//         MessageService,
//         AuthService,
//         {
//           provide: CommandBus,
//           useValue: {
//             execute: commandBus,
//           },
//         },
//         {
//           provide: JwtService,
//           useValue: mockedJwtService,
//         },
//         {
//           provide: QueryBus,
//           useValue: {
//             execute: queryBus,
//           },
//         },
//       ],
//     }).compile();
//     service = modRef.get(MessageService);
//   });

// describe('getAllMessage', () => {
//   beforeEach(async () => {
//     queryBus.mockResolvedValue([message, message]);
//   });
//   it('should return messages', async () => {
//     expect(await service.getAllMessages('1')).toStrictEqual([
//       message,
//       message,
//     ]);
//   });
// });

// TODO: test saveMessage
// describe('SaveMessage', () => {
//   beforeEach(async () => {
//     queryBus.mockResolvedValue(message);
//   });
//   it('should return message', async () => {
//     expect(await service.saveMessage('test', mockUser1)).toBe(message);
//   });
// });

// TODO: test getUserFromSocket
// describe('getUserFromSocket', () => {
//   beforeEach(async () => {
//     queryBus.mockResolvedValue(mockUser1);
//   });
//   it('should return message', async () => {
//     expect(
//       await service.getUserFromSocket(
//         new Socket(undefined, undefined, undefined),
//       ),
//     ).toBe(mockUser1);
//   });
// });
// });
